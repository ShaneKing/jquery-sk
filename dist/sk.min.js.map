{"version":3,"sources":["sk.min.js"],"names":["checkGlobal","value","Object","SK","this","prototype","constructor","STR_OF_INFINITY","STR_OF_INVALID_DATE","STR_OF_NAN","STR_OF_NULL","STR_OF_UNDEFINED","ARR_OF_BAD_VALUE","STR_OF_TRUE","STR_OF_CONSTRUCTOR","STR_OF_BOOLEAN","STR_OF_FUNCTION","STR_OF_OBJECT","TAG_OF_OBJECT","PROTO_OF_OBJECT","getPrototypeOf","TYPE_OF_CLASS","FUNC_OF_OBJECT_toString","toString","OWN_OF_OBJECT","hasOwnProperty","FUNC_OF_OWN_OBJECT_toString","RST_OF_OWN_OBJECT_toString","call","typeOf","obj","isFunction","isPlainObject","proto","Ctor","extend","options","name","src","copy","copyIsArray","clone","target","arguments","i","length","deep","Array","isArray","undefined","$","context","innerContext","root","inner$","a","array","b","boolean","String","d","date","defaultDate","rtnDate","Date","isNullOrUndefined","n","number","defaultNumber","isNaN","Number","o","object","s","string","defaultString","indexOf","freeGlobal","global","freeSelf","self","thisGlobal","Function","_SK","noConflict","define","amd","exports","module"],"mappings":"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","file":"sk.min.js","sourcesContent":[";(function () {\r\n  'use strict';\r\n\r\n  // Export SK.\r\n  var SK = function () {\r\n    return this;\r\n  };\r\n  SK.prototype = {\r\n    constructor: SK\r\n  };\r\n\r\n  var STR_OF_INFINITY = 'Infinity';\r\n  var STR_OF_INVALID_DATE = 'Invalid Date';\r\n  var STR_OF_NAN = 'NaN';\r\n  var STR_OF_NULL = 'null';\r\n  var STR_OF_UNDEFINED = 'undefined';\r\n  var ARR_OF_BAD_VALUE = [STR_OF_INFINITY, STR_OF_INVALID_DATE, STR_OF_NAN, STR_OF_NULL, STR_OF_UNDEFINED];\r\n\r\n  var STR_OF_TRUE = 'true';\r\n\r\n  var STR_OF_CONSTRUCTOR = 'constructor';\r\n  var STR_OF_BOOLEAN = 'boolean';\r\n  var STR_OF_FUNCTION = 'function';\r\n  var STR_OF_OBJECT = 'object';\r\n\r\n  var TAG_OF_OBJECT = '[object Object]';\r\n\r\n  var PROTO_OF_OBJECT = Object.getPrototypeOf;\r\n\r\n  var TYPE_OF_CLASS = {};\r\n  var FUNC_OF_OBJECT_toString = TYPE_OF_CLASS.toString;\r\n\r\n  var OWN_OF_OBJECT = TYPE_OF_CLASS.hasOwnProperty;\r\n  var FUNC_OF_OWN_OBJECT_toString = OWN_OF_OBJECT.toString;\r\n  var RST_OF_OWN_OBJECT_toString = FUNC_OF_OWN_OBJECT_toString.call(Object);\r\n\r\n  var typeOf = function (obj) {\r\n    if (obj == null) {\r\n      return obj + '';\r\n    }\r\n    // Support: Android <=2.3 only (functionish RegExp)\r\n    return typeof obj === STR_OF_OBJECT || typeof obj === STR_OF_FUNCTION ? TYPE_OF_CLASS[FUNC_OF_OBJECT_toString.call(obj)] || STR_OF_OBJECT : typeof obj;\r\n  };\r\n\r\n  var isFunction = function (obj) {\r\n    return typeOf(obj) === STR_OF_FUNCTION;\r\n  };\r\n\r\n  var isPlainObject = function (obj) {\r\n    var proto, Ctor;\r\n\r\n    // Detect obvious negatives\r\n    // Use toString instead of jQuery.type to catch host objects\r\n    if (!obj || FUNC_OF_OBJECT_toString.call(obj) !== TAG_OF_OBJECT) {\r\n      return false;\r\n    }\r\n\r\n    proto = PROTO_OF_OBJECT(obj);\r\n\r\n    // Objects with no prototype (e.g., `Object.create( null )`) are plain\r\n    if (!proto) {\r\n      return true;\r\n    }\r\n\r\n    // Objects with prototype are plain if they were constructed by a global Object function\r\n    Ctor = OWN_OF_OBJECT.call(proto, STR_OF_CONSTRUCTOR) && proto.constructor;\r\n    return typeof Ctor === STR_OF_FUNCTION && FUNC_OF_OWN_OBJECT_toString.call(Ctor) === RST_OF_OWN_OBJECT_toString;\r\n  };\r\n\r\n  /** Copy from jQuery, different is array extend */\r\n  SK.extend = function () {\r\n    var options, name, src, copy, copyIsArray, clone,\r\n      target = arguments[0] || {},\r\n      i = 1,\r\n      length = arguments.length,\r\n      deep = false;\r\n    // Handle a deep copy situation\r\n    if (typeof target === STR_OF_BOOLEAN) {\r\n      deep = target;\r\n      // Skip the boolean and the target\r\n      target = arguments[i] || {};\r\n      i++;\r\n    }\r\n    // Handle case when target is a string or something (possible in deep copy)\r\n    if (typeof target !== STR_OF_OBJECT && !isFunction(target)) {\r\n      target = {};\r\n    }\r\n    // Extend jQuery itself if only one argument is passed\r\n    if (i === length) {\r\n      target = this;\r\n      i--;\r\n    }\r\n    for (; i < length; i++) {\r\n      // Only deal with non-null/undefined values\r\n      if (( options = arguments[i] ) != null) {\r\n        // Extend the base object\r\n        for (name in options) {\r\n          src = target[name];\r\n          copy = options[name];\r\n          // Prevent never-ending loop\r\n          if (target === copy) {\r\n            continue;\r\n          }\r\n          // Recurse if we're merging plain objects or arrays\r\n          if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\r\n            if (copyIsArray) {\r\n              copyIsArray = false;\r\n              clone = [];//src && jQuery.isArray( src ) ? src : []; //sk different with jQuery\r\n            } else {\r\n              clone = src && isPlainObject(src) ? src : {};\r\n            }\r\n            // Never move original objects, clone them\r\n            target[name] = SK.extend(deep, clone, copy);\r\n            // Don't bring in undefined values\r\n          } else if (copy !== undefined) {\r\n            target[name] = copy;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Return the modified object\r\n    return target;\r\n  };\r\n\r\n  /** New namespace */\r\n  SK.$ = function (context, $) {\r\n    var innerContext = context ? context : root;\r\n    var inner$ = $ ? $ : '$sk';\r\n    if (!innerContext[inner$]) {\r\n      innerContext[inner$] = {};\r\n    }\r\n    return innerContext[inner$];\r\n  };\r\n\r\n  //Always return valid Array, if invalid return empty array\r\n  SK.a = function (array) {\r\n    return Array.isArray(array) ? array : [];\r\n  };\r\n  //Just true return true, other return false\r\n  SK.b = function (boolean) {\r\n    return String(boolean) === STR_OF_TRUE && boolean !== STR_OF_TRUE && boolean;\r\n  };\r\n  //Always return valid Date, if invalid return defaultDate or new Date()\r\n  SK.d = function (date, defaultDate) {\r\n    var rtnDate = arguments.length > 1 ? defaultDate : new Date();\r\n    return (date instanceof Date) ? (date.toString() === STR_OF_INVALID_DATE ? rtnDate : date) : rtnDate;\r\n  };\r\n  //UnInput\r\n  SK.isNullOrUndefined = function (value) {\r\n    return value === null || value === undefined;\r\n  };\r\n  //Can be to Number than return value of number, other return 0\r\n  SK.n = function (number, defaultNumber) {\r\n    return isNaN(Number(number)) ? (arguments.length > 1 ? defaultNumber : 0) : Number(number);\r\n  };\r\n  //Always return plain Object, if invalid return empty object\r\n  SK.o = function (object) {\r\n    return isPlainObject(object) ? object : {};\r\n  };\r\n  //Return the String of input\r\n  SK.s = function (string, defaultString) {\r\n    return ARR_OF_BAD_VALUE.indexOf(String(string)) === -1 ? String(string) : (arguments.length > 1 ? defaultString : '');\r\n  };\r\n\r\n  /**\r\n   * Checks if `value` is a global object.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {null|Object} Returns `value` if it's a global object, else `null`.\r\n   */\r\n  function checkGlobal(value) {\r\n    return (value && value.Object === Object) ? value : null;\r\n  }\r\n\r\n  /** Detect free variable `global` from Node.js. */\r\n  var freeGlobal = checkGlobal(typeof global == STR_OF_OBJECT && global);\r\n  /** Detect free variable `self`. */\r\n  var freeSelf = checkGlobal(typeof self == STR_OF_OBJECT && self);\r\n  /** Detect `this` as the global object. */\r\n  var thisGlobal = checkGlobal(typeof this == STR_OF_OBJECT && this);\r\n  /** Used as a reference to the global object. */\r\n  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();\r\n\r\n  // Save the previous value of the `SK` variable.\r\n  var _SK = root.SK;\r\n\r\n  // Expose SK on the free variable `window` or `self` when available so it's\r\n  // globally accessible, even when bundled with Browserify, Webpack, etc. This\r\n  // also prevents errors in cases where SK is loaded by a script tag in the\r\n  // presence of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch\r\n  // for more details. Use `SK.noConflict` to remove SK from the global object.\r\n  (freeSelf || {}).SK = SK;\r\n\r\n  // Run sk.js in *noConflict* mode, returning the `SK` variable to its\r\n  // previous owner. Returns a reference to the SK object.\r\n  SK.noConflict = function () {\r\n    root.SK = _SK;\r\n    return this;\r\n  };\r\n\r\n  // Some AMD build optimizers like r.js check for condition patterns like the following:\r\n  if (typeof define == STR_OF_FUNCTION && typeof define.amd == STR_OF_OBJECT && define.amd) {\r\n    // Define as an anonymous module so, through path mapping, it can be\r\n    // referenced as the \"SK\" module.\r\n    define(function () {\r\n      return SK;\r\n    });\r\n  }\r\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\r\n  else if (typeof exports !== STR_OF_UNDEFINED) {\r\n    if (typeof module !== STR_OF_UNDEFINED && module.exports) {\r\n      exports = module.exports = SK;\r\n    }\r\n    exports.SK = SK;\r\n  }\r\n  else {\r\n    // Export to the global object.\r\n    root.SK = SK;\r\n  }\r\n}.call(this));\r\n"],"sourceRoot":"/source/"}